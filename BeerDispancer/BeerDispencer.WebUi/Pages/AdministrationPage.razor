@page "/administration"

@using BeerDispenser.Shared;
@inject IHttpClientFactory _httpClientFactory;
@inject HttpClient _httpClient;


<PageTitle>Account Information</PageTitle>

@if (_users?.Any() == null)

{
    <p> <em> Loading...</em> </p>
}


<RadzenCard>
    <RadzenText Style="margin-bottom:50px" TextStyle="TextStyle.H5" TagName="TagName.H5" TextAlign="TextAlign.Center">Authorized Users</RadzenText>

    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add User" Click="@InsertRow" Disabled=@(usertoCreate != null || userToUpdate != null) />


    <RadzenDataGrid @ref="_usersGrid" TItem="UserCredentials" AllowAlternatingRows="false" EditMode="DataGridEditMode.Single"
                    Data="@_users" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="UserCredentials" Property="UserName" Title="UserName" Width="150px">
                <EditTemplate Context="User">
                    <RadzenTextBox @bind-Value="User.UserName" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="UserCredentials"  Title="Password" Width="150px">
                <EditTemplate Context="User">
                    <RadzenPassword @bind-Value="User.Password" Style="width:100%" />
                </EditTemplate>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="UserCredentials" Property="Role" Title="Role" Width="150px">
                <EditTemplate Context="User">
                    <RadzenDropDown  @bind-Value="User.Role" Data="Enum.GetValues(typeof(UserRoles))" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="UserCredentials" Context="User" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="User">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(User))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <Template Context="User">
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(async () => await OnDeleteClick(User))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(User))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="User">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(async (args) => await SaveRow(User))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(User))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>


@code {

            RadzenDataGrid<UserCredentials> _usersGrid;
            IEnumerable<UserCredentials> _users;

            UserCredentials usertoCreate;
            UserCredentials userToUpdate;

            string _password;

    protected override async Task OnInitializedAsync()
        {
            await GetDataAsync();
        }

        private async Task GetDataAsync()
        {
            _httpClient = _httpClientFactory.CreateClient("ServerAPI");
            _users = (await _httpClient.GetFromJsonAsync<UserCredentials[]>("api/auth/getallusers"));
        }

        async Task InsertRow()
        {
            usertoCreate = new UserCredentials
            {
                Role = UserRoles.Client
            };
            await _usersGrid.InsertRow(usertoCreate);
        }

        async Task EditRow(UserCredentials user)
        {
            await _usersGrid.EditRow(user);
        }

        async Task SaveRow(UserCredentials user)
        {
            await _usersGrid.UpdateRow(user);

            var createCommand = new UserCredentials
            {
                UserName = user.UserName,
                Password = user.Password,
                Role = user.Role
            };

            await _httpClient.PostAsJsonAsync($"/api/auth/create", createCommand);

            await GetDataAsync();
            Reset();
        }

        async Task OnDeleteClick(UserCredentials user)
        {

        }

        void CancelEdit(UserCredentials user)
        {
            Reset();
            _usersGrid.CancelEditRow(user);
        }

        void Reset()
        {
            usertoCreate = null;
            userToUpdate = null;
        }

    }