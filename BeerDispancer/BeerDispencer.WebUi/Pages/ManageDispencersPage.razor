@page "/manage"
@using ViewModels.Request;
@using ViewModels.Response;
@using BeerDispenser.Shared;
@inject IHttpClientFactory _httpClientFactory;
@inject HttpClient _httpClient;
@inject DialogService DialogService



<title>Manage Dispensers</title>

@if (_dispensers == null)
{
    <p> <em> Loading...</em> </p>
}
else
{
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.H3" TextAlign="TextAlign .Center">Manage Dispensers</RadzenText>

        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Dispenser" Click="@InsertRow" Disabled=@(dispenserToCreate != null || dispenserToUpdate != null) />

        <RadzenDataGrid @ref="_dispensersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@_dispensers" RowCreate="@OnCreateRow" TItem="DispenserResponseDto" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="DispenserResponseDto" Property="Id" Title="Id" Width="150px" />

                <RadzenDataGridColumn TItem="DispenserResponseDto" Property="Volume" Title="Volume">
                    <EditTemplate Context="DispenserWithStatus">
                        <RadzenNumeric @bind-Value="DispenserWithStatus.Volume" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="DispenserResponseDto" Property="Status" Title="Status" Width="150px">
                    <EditTemplate Context="DispenserResponseDto">
                        <RadzenDropDown @bind-Value="DispenserResponseDto.Status" Data="Enum.GetValues(typeof(DispenserStatusDto))" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="DispenserResponseDto" Property="IsActive" Title="IsActive" Width="150px">
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="DispenserResponseDto" Property="ReservedFor" Title="Reservation" Width="150px" />

                <RadzenDataGridColumn TItem="DispenserResponseDto" Context="DispenserResponseDto" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="DispenserResponseDto">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(DispenserResponseDto))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <Template Context="DispenserResponseDto">
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Visible="DispenserResponseDto.IsActive" Click="@(async ()=>await OnDeleteClick(DispenserResponseDto))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(DispenserResponseDto))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="DispenserResponseDto">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(async (args) => await SaveRow(DispenserResponseDto))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(DispenserResponseDto))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
}



@code {

    IEnumerable<DispenserStatusDto> dispenserStatuses = Enum.GetNames(typeof(DispenserStatusDto)).Cast<DispenserStatusDto>();
    RadzenDataGrid<DispenserResponseDto> _dispensersGrid;
    IEnumerable<DispenserResponseDto> _dispensers;

    DispenserResponseDto dispenserToCreate;
    DispenserResponseDto dispenserToUpdate;


    async Task GetData()
    {
        _httpClient = _httpClientFactory.CreateClient("ServerAPI");

        _dispensers = (await _httpClient.GetFromJsonAsync<DispenserResponseDto[]>("api/Dispenser/all"))
                .OrderByDescending(x => x.IsActive)
                .ToArray();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }


    async Task InsertRow()
    {
        dispenserToCreate = new DispenserResponseDto
        {
            Status = BeerDispenser.Shared.DispenserStatusDto.Closed,
        };
        await _dispensersGrid.InsertRow(dispenserToCreate);
    }

    async Task DeleteRow(DispenserResponseDto dispenser)
    {
        Reset();
        await _httpClient.PostAsync($"/api/Dispenser/{dispenser.Id}/setinactive", null);
        await GetData();
    }


    async Task OnCreateRow(DispenserResponseDto dispenser)
    {
        Console.WriteLine("OnCreateRow");
        var dispenserModel = new Dispenser { FlowVolume = dispenser.Volume };
        dispenserToCreate = new DispenserResponseDto { Volume = dispenser.Volume };
    }

    async Task SaveRow(DispenserResponseDto dispenser)
    {
        if (dispenserToUpdate is not null)
        {


            var dispenserToUpdate = new DispenserUpdateModel { Status = dispenser.Status, UpdatedAt = DateTime.UtcNow };
            await _httpClient.PutAsJsonAsync($"/api/Dispenser/{dispenser.Id}/status", dispenserToUpdate);
        }

        if (dispenserToCreate is not null)
        {
            Console.WriteLine("DispenserWithStatus=" + dispenser.Volume);
            Console.WriteLine("dispenserToCreate=" + dispenserToCreate.Volume);
            var dispenserModel = new DispenserCreate { FlowVolume = dispenserToCreate.Volume };
            await _httpClient.PostAsJsonAsync("/api/Dispenser", dispenserModel);
        }

        Reset();
        await GetData();
    }

    async Task EditRow(DispenserResponseDto dispenser)
    {
        dispenserToUpdate = new DispenserResponseDto
        {
            Id = dispenser.Id,
            IsActive = dispenser.IsActive,
            ReservedFor = dispenser.ReservedFor,
            Status = dispenser.Status,
            Volume = dispenser.Volume
        };

        await _dispensersGrid.EditRow(dispenser);
    }

    void CancelEdit(DispenserResponseDto dispenser)
    {
        Reset();
        _dispensersGrid.CancelEditRow(dispenser);
    }

    async Task OnDeleteClick(DispenserResponseDto dispenser)
    {
        var result = await DialogService
            .OpenAsync("Are you sure you want to delete this dispenser?", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Confirm Delete <b>@dispenser.Id</b>?</p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>);

if (result == true)
{
await DeleteRow(dispenser);
}
}

void Reset()
{
dispenserToCreate = null;
dispenserToUpdate = null;
}

}
