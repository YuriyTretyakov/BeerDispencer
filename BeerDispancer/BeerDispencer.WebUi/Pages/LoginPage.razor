@page "/login"
@using Implementation;
@using Microsoft.AspNetCore.Components.Authorization
@using BeerDispenser.WebUi.Implementation.ExternalLogin.Google;

@inject NavigationManager NavManager
@inject AccountService accountService;
@inject UserNotificationService NotificationService;


@inject IHttpClientFactory _httpClientFactory;
@inject HttpClient _httpClient;

@inject IJSRuntime JSRuntime
@inject BlazorSchoolAuthenticationStateProvider BlazorSchoolAuthenticationStateProvider


<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="true" AllowResetPassword="true" Username="" Password=""
                     AllowRememberMe="true" RememberMe="@rememberMe"
                     Login=@(args =>OnLogin(args))
                     ResetPassword=@(args=>OnResetPassword(args))
                     Register=@(OnRegister) />
    </RadzenTemplateForm>

    
</RadzenCard>

<div id="google-button"></div>

@code {

    bool rememberMe = false;
    string loginUrl;

    protected override async Task OnInitializedAsync()
    {
        var blazorSchoolAuthenticationStateProvider = DotNetObjectReference.Create<BlazorSchoolAuthenticationStateProvider>(BlazorSchoolAuthenticationStateProvider);
        await JSRuntime.InvokeVoidAsync("blazorSchoolGoogleInitialize", "445014183184-fgvruaa5litvbvfqolp2eb0o357acgfm.apps.googleusercontent.com", blazorSchoolAuthenticationStateProvider);
        var element = await JSRuntime.InvokeAsync<IJSObjectReference>("document.getElementById", "google-button");
        await JSRuntime.InvokeVoidAsync("google.accounts.id.renderButton", element, new { theme = "filled_blue", size = "large" });

    }

    async Task OnLogin(LoginArgs args)
    {
        Console.WriteLine($"Username: {args.Username}, password: {args.Password}, remember me: {args.RememberMe}");

        var (result, details) = await accountService.Login(args.Username, args.Password);

        if (result)
        {
            NavManager.NavigateTo("/bar");
        }
        else
        {
            NotificationService.ShowErrorNotification($"Login failed. {details}");
        }
    }

    void OnRegister()
    {
        Console.WriteLine("-> Register");
    }

    void OnResetPassword(string value)
    {
        Console.WriteLine($"ResetPassword for user: {value}");
    }

    }

