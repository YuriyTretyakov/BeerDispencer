@page "/account"
@using Radzen.Blazor;
@using Implementation;
@using BeerDispenser.Shared.Dto;
@using BeerDispenser.Shared;
@inject IJSRuntime jsRuntime;
@inject TimeZoneService timeZoneService;
@inject AccountService accountService;
@inject NavigationManager NavManager;
@inject IHttpClientFactory _httpClientFactory;
@inject HttpClient _httpClient;
@inject DialogService DialogService

<PageTitle>Account Information</PageTitle>



@if (@accountService.IsLoggedIn)
{

    @*<div hidden="(!@accountService.IsLoggedIn)">*@

    <RadzenCard>
        <RadzenText Style="margin-bottom:50px" TextStyle="TextStyle.H5" TagName="TagName.H5" TextAlign="TextAlign.Center">Login Details</RadzenText>

        <RadzenDataGrid @ref="_accountGrid" TItem="AccountData" AllowAlternatingRows="false" EditMode="DataGridEditMode.Single"
                        Data="@_account" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="AccountData" Property="UserName" Title="UserName" Width="150px" />
                <RadzenDataGridColumn TItem="AccountData" Property="Role" Title="Role" Width="150px" />
                <RadzenDataGridColumn TItem="AccountData" Property="ValidUndtill" Title="Valid" Width="150px" />
                <RadzenDataGridColumn TItem="AccountData" Property="LocalTime" Title="LocalTime" Width="150px" />
            </Columns>

        </RadzenDataGrid>
        <RadzenText Style="margin-top:20px" TextStyle="TextStyle.DisplayH6" Text="Token"></RadzenText>
        <span>
            <RadzenTextBox Style="width:90%;" ReadOnly="true" Value="@_account.First().Token"> </RadzenTextBox>
            <RadzenButton Text="Copy" Style="align-content:end" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Click="(async () => await CopyToClipboard(_account.First().Token))" />
        </span>
    </RadzenCard>

    <RadzenCard Style="margin-top:20px">
        <RadzenText Style="margin-bottom:50px" TextStyle="TextStyle.H5" TagName="TagName.H5" TextAlign="TextAlign.Center">Payment Information</RadzenText>

        <RadzenDataGrid @ref="_paymentsGrid" TItem="PaymentCardViewModel" AllowAlternatingRows="false" Data="@_paymentCards">
            <Columns>
                <RadzenDataGridColumn TItem="PaymentCardViewModel" Property="Brand" Title="Type" Width="50px">
                    <Template Context="data">
                        @if (data.Brand.Equals("Visa", StringComparison.InvariantCultureIgnoreCase))
                        {
                            <i class="fa fa-cc-visa" style="font-size:48px;color:blue"></i>
                        }
                        else if (data.Brand.Equals("MasterCard", StringComparison.InvariantCultureIgnoreCase))
                        {
                            <i class="fa fa-cc-mastercard" style="font-size: 48px; color: #fbb600"></i>
                        }
                        else
                        {
                            <i class="fa fa-credit-card" style="font-size:48px;color:black"></i>
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PaymentCardViewModel" Title="Expiration" Width="50px">
                    <Template Context="data">
                        <p>@data.ExpMonth/@data.ExpYear</p>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PaymentCardViewModel" Title="Card Number" Width="50px">
                    <Template Context="data">
                        <p>**** **** **** @data.Last4</p>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PaymentCardViewModel" Property="AccountHolderName" Title="Name" Width="80px" />
                <RadzenDataGridColumn TItem="PaymentCardViewModel" Property="Country" Title="Country" Width="30px" />
                <RadzenDataGridColumn TItem="PaymentCardViewModel" Property="IsDefault" Title="Default" Width="50px" />
                <RadzenDataGridColumn TItem="PaymentCardViewModel" Width="50px" TextAlign="TextAlign.Right">
                    <Template Context="PaymentCardViewModel">
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(async () => await OnDeleteClick(PaymentCardViewModel))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton Icon="done" Visible="!PaymentCardViewModel.IsDefault" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => OnSetDefaultClick(PaymentCardViewModel))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>


        <RadzenButton Text="Add Card" Style="text-align: right; margin-top:20px" Icon="credit_card" ButtonStyle="ButtonStyle.Success" Click="@(args => onAddCardClick())"
                      @onclick:stopPropagation="true" Size="ButtonSize.Medium" />
    </RadzenCard>
    @*</div>*@

}
else
{

    @*<div hidden="@(accountService.IsLoggedIn)">*@
    <RadzenCard>
        <RadzenText>Please Sign in</RadzenText>
        <RadzenButton Style="margin-top:20px" ButtonStyle="ButtonStyle.Success" Text="Sign In" Click="@(args => mainLayout.OpenLogin())" />
    </RadzenCard>
    @*</!--div>*@

}

@code {
    [CascadingParameter]
    public MainLayout mainLayout { get; set; }







    private IEnumerable<AccountData> _account;
    RadzenDataGrid<AccountData> _accountGrid;

    private IEnumerable<PaymentCardViewModel> _paymentCards;
    RadzenDataGrid<PaymentCardViewModel> _paymentsGrid;

    private class AccountData
    {
        public string UserName { get; set; }
        public string Token { get; set; }
        public UserRolesDto? Role { get; set; }
        public DateTimeOffset? ValidUndtill { get; set; }
        public DateTimeOffset? LocalTime { get; set; }
    }



    protected override async Task OnAfterRenderAsync(bool result)
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {

        //  accountService.OnAccountStateChanged += OnAccountStateChanged;

        _account = new List<AccountData>{new AccountData
                    {
                        UserName = accountService.UserName,
                        Token = accountService.Token,
                        Role = accountService.Role,
                        ValidUndtill = accountService.ValidUntil,
                        LocalTime = DateTime.Now
                    } };

        _httpClient = _httpClientFactory.CreateClient("ServerAPI");

        if (accountService.IsLoggedIn)
        {
            _paymentCards = (await _httpClient.GetFromJsonAsync<PaymentCardViewModel[]>("api/Payments/getcards"))
            .OrderBy(x => x.Created)
            .ToArray();
        }
    }

    private void OnAccountStateChanged(object sender, AccountStateChangedArgs args)
    {
        Console.WriteLine("Event fired:" + args.IsLoggedIn);

        StateHasChanged();
    }

    private async Task CopyToClipboard(string textToCopy)
    {
        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", textToCopy);
    }

    private async Task onAddCardClick()
    {
        NavManager.NavigateTo("AddPayment");
    }

    async Task OnDeleteClick(PaymentCardViewModel card)
    {
        var result = await DialogService.OpenAsync("Are you sure you want to delete this card?", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Confirm Delete <b>@card.Brand @card.Last4 @card.AccountHolderName</b>?</p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>);

if (result == true)
{
  await DeleteRow(card);
}
}
async Task DeleteRow(PaymentCardViewModel card)
{
await _httpClient.DeleteAsync($"/api/payments/{card.Id}");
await OnInitializedAsync();
}

async Task OnSetDefaultClick(PaymentCardViewModel card)
{
await _httpClient.GetAsync($"/api/payments/{card.Id}/setdefault");
await OnInitializedAsync();
}
}

