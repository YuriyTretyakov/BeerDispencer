@page "/account"
@using Radzen.Blazor;
@inject BeerDispenser.WebUi.Implementation.TimeZoneService TimeZoneService

<PageTitle>Account</PageTitle>

@if (_account == null)
{
    <p> <em> Loading...</em> </p>
}

<RadzenCard>

    <RadzenButton Text="add" Click="@(args => addfake())"/>



    @if (!string.IsNullOrEmpty(mainLayout.GetUserName()))
    {

        <RadzenText Style="margin-bottom:50px" TextStyle="TextStyle.H3" TagName="TagName.H3" TextAlign="TextAlign.Center">Account Information</RadzenText>

        <RadzenDataGrid @ref="_accountGrid" TItem="AccountData" AllowAlternatingRows="false" EditMode="DataGridEditMode.Single"
                        Data="@_account" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="AccountData" Property="UserName" Title="UserName" Width="150px" />
                <RadzenDataGridColumn TItem="AccountData" Property="Role" Title="Role" Width="150px" />
                <RadzenDataGridColumn TItem="AccountData" Property="ValidUndtill" Title="Valid" Width="150px" />
                <RadzenDataGridColumn TItem="AccountData" Property="LocalTime" Title="LocalTime" Width="150px" />
            </Columns>
          
        </RadzenDataGrid>


        @*<RadzenRow Gap="1rem" JustifyContent="JustifyContent.Left">
            <RadzenColumn Size="12" SizeSM="6" Sty>
                <RadzenStack>
                    <RadzenLabel>Username</RadzenLabel>
                    <RadzenText>@mainLayout.GetUserName()</RadzenText>
                </RadzenStack>

                <RadzenStack>
                    <RadzenLabel>Token</RadzenLabel>
                    <RadzenText>@mainLayout.Token</RadzenText>
                </RadzenStack>

                <RadzenStack>
                    <RadzenLabel>Role</RadzenLabel>
                    <RadzenText>@mainLayout.Role</RadzenText>
                </RadzenStack>

                <RadzenStack>
                    <RadzenLabel>ValidUntil</RadzenLabel>
                    <RadzenText>@mainLayout.ValidUntil</RadzenText>
                </RadzenStack>

                <RadzenStack>
                    <RadzenLabel>LocalTime</RadzenLabel>
                    <RadzenText>@now.ToString()</RadzenText>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>*@



    }
    else
    {
        <RadzenText>Please Login</RadzenText>
        <RadzenButton Text="Login" Click="@(args => mainLayout.OpenLogin())" />
    }
    </RadzenCard>


@code {
            [CascadingParameter]
            public MainLayout mainLayout { get; set; }
    public DateTimeOffset? now;

        private IEnumerable<AccountData> _account;
        RadzenDataGrid<AccountData> _accountGrid;

        private class AccountData
        {
            public string UserName { get; set; }
            public string Token { get; set; }
            public string Role { get; set; }
            public DateTime? ValidUndtill { get; set; }
            public DateTimeOffset? LocalTime { get; set; }
        }

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();


        }

        private void addfake()
        {
            _account.ToList().Add(new AccountData
            {
                UserName = "cqwcqwcqw",
                Token = "cewwccewweccwe",
                Role = "rrr",
                ValidUndtill = DateTime.UtcNow,
                LocalTime = now
            });
        }




        protected override async void OnAfterRender(bool firstRender)
        {
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(_account));

            now = await TimeZoneService.GetLocalDateTime(DateTime.UtcNow);
            _account = new List<AccountData>{new AccountData
        {
            UserName = mainLayout.GetUserName(),
            Token = mainLayout.Token,
            Role = mainLayout.Role,
            ValidUndtill = mainLayout.ValidUntil,
            LocalTime = now
        } };

            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(_account));

        }

    }
