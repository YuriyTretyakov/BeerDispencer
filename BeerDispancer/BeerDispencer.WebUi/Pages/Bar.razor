@page "/bar"
@inject NavigationManager navManager;

<PageTitle>Bar</PageTitle>

<h1>Beer Dispencers</h1>

<style>
    .container {
        display: grid;
        grid-template-columns: 20% 20% 20% 20% 20% 20%;
        align-items: center;
        background-image: url('/images/background.png');
        height: 500px;
        background-size: 100% 100%;
        background-repeat: no-repeat;
        position: relative;
    }

    .dispencer {
        height: "200px";
        width: "100px";
        position: absolute;
        bottom:"15%";
       
        align-items: center;
    }

    .background {
        max-width: inherit;
        max-height: inherit;
        height: inherit;
        width: inherit;
        object-fit: cover;
    }
</style >

@if (dispencers == null)
    {
     <p > <em > Loading...</em > </p >
    }
    else
    {
     <table class="table" >
    <thead >
    <tr >
    <th > Id</th >
    <th > Volume</th >
    <th > Status</th >
    </tr >
    </thead >
    <tbody >
    @foreach (var dispencer in dispencers)
        {
                 <tr >
    <td >@dispencer.Id </td >
    <td >@dispencer.Volume </td >
    <td >@dispencer.Status </td >

    </tr >
        }
    </tbody >
    </table >

     <div class="container">
             @foreach (var dispencer in dispencers)
             {
             @if (dispencer.Status == BeerDispencer.WebUi.ViewModels.Request.DispencerStatusDto.Close)
                 {
                 <div  @onclick="@(() => onDispencerClick(@dispencer.Id, @dispencer.Status))">
                     <img  style="bottom:15%" class="dispencer" src="/images/kran_regular.png" alt="BeerDispencer" height="200px" width="100px" />
                  </div>
                 }
            @if (dispencer.Status == BeerDispencer.WebUi.ViewModels.Request.DispencerStatusDto.Open)
                {
                <div @onclick="@(() => onDispencerClick(@dispencer.Id, @dispencer.Status))">
                    <img class="dispencer" style="bottom:15%" src="/images/kran_inuse.png" alt="BeerDispencer" height="200px" width="100px" />
                </div>
                }
             }
        </div>

    }



         @code {

             private async Task onDispencerClick(Guid id, BeerDispencer.WebUi.ViewModels.Request.DispencerStatusDto status)
             {
                 var httpclient = new HttpClient { BaseAddress = new Uri("http://localhost:5268") };

                 var update = new BeerDispencer.WebUi.ViewModels.Request.DispenserUpdateModel
                 {
                     Status = status == BeerDispencer.WebUi.ViewModels.Request.DispencerStatusDto.Close ?
                     BeerDispencer.WebUi.ViewModels.Request.DispencerStatusDto.Open :
                     BeerDispencer.WebUi.ViewModels.Request.DispencerStatusDto.Close,
                     UpdatedAt = DateTime.UtcNow
                 };

                 await httpclient.PutAsJsonAsync<BeerDispencer.WebUi.ViewModels.Request.DispenserUpdateModel>($"api/Dispencer/{id}/status", update);

                 navManager.NavigateTo("/bar",true);

             }


             private BeerDispencer.WebUi.ViewModels.Response.DispencerWithStatus[]? dispencers;

             protected override async Task OnInitializedAsync()
             {
                 var httpclient = new HttpClient { BaseAddress = new Uri("http://localhost:5268") };

                 dispencers = (await httpclient.GetFromJsonAsync<BeerDispencer.WebUi.ViewModels.Response.DispencerWithStatus[]>("api/Dispencer/getall"))
                     .OrderBy(x=>x.Id)
                     .ToArray();
             }

             }

