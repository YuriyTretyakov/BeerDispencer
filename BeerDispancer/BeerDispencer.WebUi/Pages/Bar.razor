@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using BeerDispenser.Shared;
@using BeerDispenser.WebUi.ViewModels.Request;
@using BeerDispenser.WebUi.ViewModels.Response;

@page "/bar"
@inject NavigationManager navManager;
@inject IJSRuntime jsRuntime;

<PageTitle>Bar</PageTitle>

<h1>Beer Dispencers</h1>

<style>
    .container {
        display: grid;
        grid-template-columns: 20% 20% 20% 20% 20% 20%;
        align-items: center;
        background-image: url('/images/background.png');
        height: 500px;
        background-size: 100% 100%;
        background-repeat: no-repeat;
        position: relative;
    }

    .dispencer {
        height: "200px";
        width: "100px";
        position: absolute;
        bottom: "15%";
        align-items: center;
    }

    .background {
        max-width: inherit;
        max-height: inherit;
        height: inherit;
        width: inherit;
        object-fit: cover;
    }
</style>

@if (dispencers == null)
{
    <p> <em> Loading...</em> </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th> Id</th>
                <th> Volume</th>
                <th> Status</th>
                <th> Reservation</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dispencer in dispencers)
            {
                <tr>
                    <td>@dispencer.Id </td>
                    <td>@dispencer.Volume </td>
                    <td>@dispencer.Status </td>
                    <td>
                        @if (dispencer.Status == DispenserStatus.Reserved)
                        {
                            @dispencer.ReservedFor
                        }
                        else
                        {
                            <button @onclick="@(() => onPrePayClick(@dispencer.Id))">Reserve</button>
                        }
                    </td>
                    </tr>
            }
        </tbody>
    </table>

    <div class="container">
        @foreach (var dispencer in dispencers)
        {
            @if (dispencer.Status == DispenserStatus.Closed)
            {
                <div @onclick="@(() => onDispencerClick(@dispencer.Id, @dispencer.Status))">
                    <img style="bottom:15%" class="dispencer" src="/images/kran_regular.png" alt="BeerDispencer" height="200px" width="100px" />
                </div>
            }
            @if (dispencer.Status == DispenserStatus.Opened)
            {
                <div @onclick="@(() => onDispencerClick(@dispencer.Id, @dispencer.Status))">
                    <img class="dispencer" style="bottom:15%" src="/images/kran_inuse.png" alt="BeerDispencer" height="200px" width="100px" />
                </div>
            }
            @if (dispencer.Status == DispenserStatus.Reserved)
            {
                <div >
                    <img class="dispencer" style="bottom:15%" src="/images/kran_reserved.png" alt="BeerDispencer" height="200px" width="100px" />
                </div>
            }
       }
    </div>

}



@code {
    string DevApiBaseAddress = "http://localhost:5268";


    private async Task onDispencerClick(Guid id, DispenserStatus status)
    {
        var httpclient = new HttpClient { BaseAddress = new Uri(DevApiBaseAddress) };

        var update = new DispenserUpdateModel
        {
            Status = status == DispenserStatus.Closed ?
            DispenserStatus.Opened :
            DispenserStatus.Closed,
            UpdatedAt = DateTime.UtcNow
        };

        await httpclient.PutAsJsonAsync<DispenserUpdateModel>($"api/Dispenser/{id}/status", update);

        navManager.NavigateTo("/bar", true);

    }


    private DispenserWithStatus[]? dispencers;

    protected override async Task OnInitializedAsync()
    {
        var httpclient = new HttpClient { BaseAddress = new Uri(DevApiBaseAddress) };

        dispencers = (await httpclient.GetFromJsonAsync<DispenserWithStatus[]>("api/Dispenser/getall"))
            .OrderBy(x => x.Id)
            .ToArray();
    }

    private async Task onPrePayClick(Guid id)
    {
        var httpclient = new HttpClient { BaseAddress = new Uri(DevApiBaseAddress) };

        var checkoutModel = new NewOrderDetails { DispenserId = id, Amount = 120, Currency = "EUR" };

        var response = await httpclient.PostAsJsonAsync($"{DevApiBaseAddress}/api/Checkout", checkoutModel);

        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync();

        var checkoutOrderResponse =JsonConvert
            .DeserializeObject<CheckoutOrderResponse>(responseBody);

        // Opens up Stripe.

        await jsRuntime.InvokeVoidAsync("checkout", checkoutOrderResponse.PubKey, checkoutOrderResponse.SessionId);
    }
}

