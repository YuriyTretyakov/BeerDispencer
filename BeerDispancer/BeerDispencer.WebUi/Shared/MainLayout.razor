
@using BeerDispenser.WebUi.Implementation;

@inherits LayoutComponentBase
@inject NavigationManager NavManager

@inject AccountService AccountService;


<style>
    .avatar img {
        border-radius: 50%;
        width: 20px;
        display: block;
    }

    .avatar {
        text-align: justify;
        width: 50px;
        margin: 0 auto;
    }
</style>

<CascadingValue Value="this">


    <div class="page">
        <div class="sidebar">
            <NavMenu />

        </div>

        <main>
            <div class="top-row px-4">
                <div style="width:200px;text-align:right;">
                    @if (AccountService.IsLoggedIn)
                        {
                            <div style="display:inline-block">
                                <img class="avatar" src="/images/no-avatar.png" @onclick=@(() => NavManager.NavigateTo("/account")) />
                                <a style="margin-left:0" href="account"><b>@AccountService.UserName</b></a>
                            </div>
                            <button style="margin-left:50px" class="btn btn-sm btn-danger" title="Logout" @onclick="AccountService.LogoutAsync"><span class="oi oi-account-logout"></span></button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-success" title="Login" @onclick="OpenLogin"><span class="oi oi-account-login"></span></button>
                        }
                </div>
            </div>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>


</CascadingValue>

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login Form</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="userName" class="form-label">Username</label>
                    <input type="text" class="form-control" id="userName" placeholder="Enter user name..." autocomplete="off" required @bind-value="username" />
                </div>
                <div class="mb-3">
                    <label for="loginPassword" class="form-label">Password</label>
                    <input type="password" class="form-control" id="loginPassword" required @bind-value="password" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="(async () => await Login())">Login</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>
<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

@code {

    private bool show, display;

    private string username, password;



    public async Task OpenLogin()
    {
        display = true;
        await Task.Delay(100);
        show = true;
        StateHasChanged();
    }



    private async Task Close()
    {
        show = false;
        await Task.Delay(500);
        display = false;
    }

    private async Task Login()
    {
        var result = await AccountService.Login(username, password);

        if (result)
        {
            await Close();
            StateHasChanged();
            return;
        }

        username = null;
        password = null;
    }

    protected override async Task OnInitializedAsync()
    {

        //now = await TimeZoneService.GetLocalDateTime(DateTimeOffset.UtcNow);
        //Token = await LocalStorage.GetStringAsync("user");

        //if (!string.IsNullOrEmpty(Token))
        //{
        //    InitClaimsByFromJwt(Token);
        //}
        //loggedIn = !string.IsNullOrEmpty(Token);
    }








    }
